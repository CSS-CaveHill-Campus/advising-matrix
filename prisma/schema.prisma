datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator kysely {
  provider = "prisma-kysely"

  output   = "../src/lib/db"
  fileName = "schema.d.ts"
}

model User {
  id         String   @id
  name       String?
  email      String   @unique
  password   String
  role       UserRole
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  sessions Session[]
  advisor  Advisor?
  student  Student?
}

model Session {
  id         String   @id
  expires_at DateTime
  user_id    String
  user       User     @relation(fields: [user_id], references: [id])
}

model Advisor {
  id       String    @id
  user_id  String    @unique
  user     User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  students Student[]
}

model Student {
  id             String    @id
  user_id        String    @unique
  advisor_id     String
  invite_token   String?
  invite_expires DateTime?
  majorId        String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user    User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  advisor Advisor @relation(fields: [advisor_id], references: [id])
  major   Major?  @relation(fields: [majorId], references: [id])
}

model Department {
  id     String  @id
  name   String
  majors Major[]
}

model Major {
  id            String     @id
  name          String
  department_id String
  department    Department @relation(fields: [department_id], references: [id])
  courses       Course[]
  students      Student[]
}

model Course {
  id      String  @id
  code    String  @unique
  name    String
  level   Int
  credits Int
  Major   Major?  @relation(fields: [majorId], references: [id])
  majorId String?
}

model Prerequisite {
  id              String @id @default(uuid())
  course_id       String
  prerequisite_id String
}

enum UserRole {
  STUDENT
  ADVISOR
  ADMIN
}
