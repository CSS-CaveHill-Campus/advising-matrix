datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator kysely {
  provider = "prisma-kysely"

  output   = "../src/lib/db"
  fileName = "schema.d.ts"
}

model User {
  id         String   @id
  name       String?
  email      String   @unique
  password   String
  role       UserRole
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  sessions Session[]
  advisor  Advisor?
  student  Student?
}

model Session {
  id         String   @id
  expires_at DateTime
  user_id    String
  user       User     @relation(fields: [user_id], references: [id])
}

model Advisor {
  id       String    @id
  user_id  String    @unique
  user     User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  students Student[]
}

model Student {
  id             String    @id
  user_id        String    @unique
  advisor_id     String
  invite_token   String?
  invite_expires DateTime?
  majorId        String?
  program_id     String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user          User            @relation(fields: [user_id], references: [id], onDelete: Cascade)
  advisor       Advisor         @relation(fields: [advisor_id], references: [id])
  program       Program?        @relation(fields: [program_id], references: [id])
  Degree        Degree[]
  StudentCourse StudentCourse[]
  electivePool  String[]
}

model Department {
  id     String   @id
  name   String
  Course Course[]
}

model Course {
  id           String     @id
  code         String     @unique
  name         String
  level        Int
  credits      Int
  department   Department @relation(fields: [departmentId], references: [id])
  departmentId String

  prerequisites   CoursePrerequisite[] @relation("CourseToPrerequisite")
  prerequisiteFor CoursePrerequisite[] @relation("PrerequisiteToCourse")

  StudentCourse StudentCourse[]
}

model CoursePrerequisite {
  id String @id @default(uuid())

  courseId       String
  prerequisiteId String

  course       Course @relation("CourseToPrerequisite", fields: [courseId], references: [id])
  prerequisite Course @relation("PrerequisiteToCourse", fields: [prerequisiteId], references: [id])

  @@unique([courseId, prerequisiteId])
}

model Prerequisite {
  id              String @id @default(uuid())
  course_id       String
  prerequisite_id String
}

model Degree {
  id         String  @id
  name       String
  student_id String
  student    Student @relation(fields: [student_id], references: [id])
}

model Program {
  id           String               @id
  name         String
  requirements ProgramRequirement[]
  students     Student[]
}

model ProgramRequirement {
  id        String          @id
  programId String
  program   Program         @relation(fields: [programId], references: [id])
  type      RequirementType
  credits   Int
  details   Json
}

model StudentCourse {
  id        String @id
  studentId String
  courseId  String
  grade     String

  student Student @relation(fields: [studentId], references: [id])
  course  Course  @relation(fields: [courseId], references: [id])
}

enum UserRole {
  STUDENT
  ADVISOR
  ADMIN
}

enum RequirementType {
  CREDITS
  POOL
}
