generator kysely {
  provider = "prisma-kysely"
  output   = "../src/lib/db"
  fileName = "schema.d.ts"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String    @id @unique @db.Uuid
  name            String?
  email           String    @unique
  password        String
  role            UserRole
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  alternate_email String?
  advisor         Advisor[]
  sessions        Session[]
  student         Student?
}

model Session {
  id         String   @id
  expires_at DateTime
  user_id    String   @db.Uuid
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Advisor {
  advisor_id String  @db.Uuid
  student_id String  @db.Uuid
  user       User    @relation(fields: [advisor_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Student    Student @relation(fields: [student_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([advisor_id, student_id])
}

model Student {
  id             String          @id @db.Uuid
  user_id        String          @unique @db.Uuid
  invite_token   String?
  invite_expires DateTime?
  program_id     String?         @db.Uuid
  created_at     DateTime        @default(now())
  updated_at     DateTime        @updatedAt
  Advisor        Advisor[]
  program        Program?        @relation(fields: [program_id], references: [id], onDelete: Restrict, onUpdate: NoAction)
  user           User            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  StudentCourse  StudentCourse[]
}

model Department {
  id     BigInt   @id @default(autoincrement())
  name   String   @unique
  Course Course[]
}

model Course {
  id                                                           Int                  @id @unique
  code                                                         String               @unique
  name                                                         String
  level                                                        Int
  credits                                                      Int
  departmentId                                                 BigInt
  department                                                   Department           @relation(fields: [departmentId], references: [id], onUpdate: NoAction)
  CoursePrerequisite_CoursePrerequisite_courseIdToCourse       CoursePrerequisite[] @relation("CoursePrerequisite_courseIdToCourse")
  CoursePrerequisite_CoursePrerequisite_prerequisiteIdToCourse CoursePrerequisite[] @relation("CoursePrerequisite_prerequisiteIdToCourse")
  StudentCourse                                                StudentCourse[]
}

model CoursePrerequisite {
  id                                               String @id @unique @default(uuid()) @db.Uuid
  courseId                                         Int
  prerequisiteId                                   Int
  Course_CoursePrerequisite_courseIdToCourse       Course @relation("CoursePrerequisite_courseIdToCourse", fields: [courseId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Course_CoursePrerequisite_prerequisiteIdToCourse Course @relation("CoursePrerequisite_prerequisiteIdToCourse", fields: [prerequisiteId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Program {
  id           String               @id @unique @db.Uuid
  name         String               @unique
  requirements ProgramRequirement[]
  students     Student[]
}

model ProgramRequirement {
  id            String          @id @db.Uuid
  programId     String          @db.Uuid
  type          RequirementType
  credits       Int
  details       Json
  level         Int?
  program       Program         @relation(fields: [programId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  StudentCourse StudentCourse[]
}

model StudentCourse {
  id            String              @id @db.Uuid
  grade         String
  requirementId String?             @db.Uuid
  studentId     String?             @db.Uuid
  courseId      Int?
  Course        Course?             @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  requirement   ProgramRequirement? @relation(fields: [requirementId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  student       Student?            @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

enum UserRole {
  STUDENT
  ADVISOR
  ADMIN
}

enum RequirementType {
  CREDITS
  POOL
}
